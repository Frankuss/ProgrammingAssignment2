unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
momths(t1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(), t1, units = 'days')
info()
bye()
3+4
?array
a=1:10
b=1:3
split(a,b)
b=1:5
split(a,b)
?split
a=("m","m","m","f","m","f")
a=("m";"m";"m";"f";"m";"f")
a=c("m","m","m","f","m","f")
a
b=1:2
split(a,b)
b=c("m","f")
split(a,b)
a=1:10
b=1:2
split(a,b)
?gl
gl(n = 2,k =5 )
a=1:10
b=gl(2,5)
b
split(a,b)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect=sapply(flags,class)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat=sapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(X = flags$population,INDEX = flags$landmass,FUN = summary)
bye()
library(datasets)
data("iris")
?iris
summary(iris)
dim(iris)
head(iris)
tapply(iris$Sepal.Length,iris$Species,mean)
colmeans(iris)
colMeans(iris)
apply(X = iris, MARGIN = 2, FUN = mean)
apply(X = iris[,1:4], MARGIN = 2, FUN = mean)
apply(X = iris[,1:4], MARGIN = 1, FUN = mean)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
?split
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
?with
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
head(mtcars)
tapply(mtcars$hp,mtcars$cyl[=c(4,8)],mean)
tapply(mtcars$hp,mtcars$cyl[==c(4,8)],mean)
tapply(mtcars$hp,mtcars$cyl[c(4,8)],mean)
tapply(mtcars$hp,mtcars&cyl,mean)
tapply(mtcars$hp, mtcars&cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
a=tapply(mtcars$hp, mtcars$cyl, mean)
a[1]-a[3]
a[1]
a[3]
debug(ls)
esc
x
x
quit
q
a
head(mtcars)
a
a
a
?debug
Q
q
a
w
ls
Q
q
a
q
q
undebug(ls)
q
q
q
q
q
q
q
Q
Q
Q
Q
Q
Q
Q
undebug(ls)
mtcars
head(mtcars)
tapply(mtcars$hp,mtcars$cyl[mtcars$cyl==c(4,8)],mean)
tapply(mtcars$hp[mtcars$cyl == c(4, 8)],mtcars$cyl[mtcars$cyl==c(4,8)],mean)
a=tapply(mtcars$hp[mtcars$cyl == c(4, 8)],mtcars$cyl[mtcars$cyl==c(4,8)],mean)
a[1]-a[2]
mtcars$hp[mtcars$cyl == c(4, 8)]
mtcars$cyl[mtcars$cyl==c(4,8)]
table(mtcars)
table(mtcars[,3])
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, unique(mtcars$cyl), mean)
tapply(unique(mtcars$hp), unique(mtcars$cyl), mean)
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp[mtcars$cyl==4|mtcars$cyl==8], mtcars$cyl[mtcars$cyl==4|mtcars$cyl==8], mean)
x=c(1,2,3,4,5)
x$mean()
x=(c(1,2,3),c(7,8,9))
x=(c(1,2,3);c(7,8,9))
x=[c(1,2,3),c(7,8,9)}
x=[c(1,2,3),c(7,8,9)]
x=[c(1,2,3),c(7,8,9)}
x=(c(1,2,3),c(7,8,9))
x=c(1,2,3),c(7,8,9)
x=c(c(1,2,3),c(7,8,9))
x
x$mean()
getmean=function(x) mean(x)
x$getmean(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a=c(1,2,3,4,5)
makevector(a)
makeVector(a)
makeVector(x = a)
b=makeVector(a)
b
cachemean(a)
x=matrix()
x
x=matrix(nrow = 2, ncol=2)
x
x=c("a","b","c")
x
makeVector(x)
makeVector
makeVector(x)
power=function(exponent){}
power<-function(exponent){
function(x){
x^exponent
}
}
square=power(2)
square(4)
cube=power(3)
cube(3)
View(cube)
View(power)
View(square)
contatore=function(){
i=0
function(){
i=i+1
}
}
conta=contatore()
conta()
conta
conta()
conta=contatore()
View(conta)
View(conta)
View(conta)
View(conta)
contatore=function(){
i=0
function(){
i=i+1
i
}
}
conta=contatore()
conta
conta()
conta()
conta()
search()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x=makeVector()
x
x$set(y = c(1,2,3,4)
x
x$set(y = c(1,2,3,4)
a
niente = function(){
function(x) {
mean(x)
}
}
x=niente()
x
niente = function(){
function(x) {
mean(x)
}
function(x) {
sum(x)
}
}
x=c(1,2,3,4,5)
x
x=niente()
a=c(1,2,3,4,5)
niente = function(){
media=function(x) {
mean(x)
}
somma=function(x) {
sum(x)
}
}
x=niente()
x
niente = function(){
media=function(x) {
mean(x)
}
somma=function(x) {
sum(x)
}
}
niente()
View(niente)
x=niente()
x
x=power(2)
x
niente = function(){
media=function(x) {
mean(x)
}
somma=function(x) {
sum(x)
}
}
niente
x=niente()
x
niente$media()
View(x)
niente = function(){
media=function(x) {
mean(x)
}
somma=function(x) {
sum(x)
}
}
View(niente)
?$
niente
niente()
x=niente
x
power<-function(exponent){
function(x){
x^exponent
}
}
x=power(2)
x
power<-function(exponent){
function(x){
x^exponent
}
function(x){
x^exponent*2
}
}
x=power(2)
x
power<-function(exponent){
elevare=function(x){
x^exponent
}
elevarex2=function(x){
x^exponent*2
}
}
x=power(2)
x
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x=makevector()
x=makeVector()
x
niente = function(x){
media=function(x) {
mean(x)
}
somma=function(x) {
sum(x)
}
}
a=niente(c(1,2,3,4,5))
a
niente=function(){
media=function(x){
mean(x)
}
somma=function(x){
sum(x)
}
}
niente
niente()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
environment(media)
environment(niente)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makevector(c(1,2,3,4,5))
makeVector(c(1,2,3,4,5))
makeVectorx=makeVector(c(1,2,3,4,5))
x=makeVector(c(1,2,3,4,5))
x
getwd()
source("Prova_lexical_scoping.R")
aVector=makeVector(1:10)
x
aVector$get()
aVector$getmean()
aVector$set(30:50)
aVector$get()
cachemean(aVector)
aVector$getmean()
cachemean(aVector)
aVector2=makeVector(1:10)
cachemean(aVector2)
cachemean(aVector2)
setwd("~/Desktop/Coursera/ProgrammingAssignment2")
source(cachematrix.R)
getwd()
source("cachematrix.R")
matrice=makeCacheMatrix(matrix(c(1,2,3,4),nrow = 2, ncol = 2))
cacheSolve(matrice)
source("cachematrix.R")
cacheSolve(matrice)
matrice=makeCacheMatrix(matrix(c(1,2,3,4),nrow = 2, ncol = 2,byrow = TRUE))
cacheSolve(matrice)
matrice=makeCacheMatrix(matrix(c(1,1,2,2,1,2,1-2,1),nrow = 3, ncol = 3,byrow = TRUE))
cacheSolve(matrice)
matrice=makeCacheMatrix(matrix(c(1,1,2,2,1,2,1,-2,1),nrow = 3, ncol = 3,byrow = TRUE))
cacheSolve(matrice)
source("cachematrix.R")
matrice=makeCacheMatrix(matrix(c(1,1,2,2,1,2,1,-2,1),nrow = 3, ncol = 3,byrow = TRUE))
cacheSolve(matrice)
cacheSolve(matrice)
source("cachematrix.R")
matrice=makeCacheMatrix(matrix(c(1,1,2,2,1,2,1,-2,1),nrow = 3, ncol = 3,byrow = TRUE))
source("cachematrix.R")
cacheSolve(matrice)
cacheSolve(matrice)
